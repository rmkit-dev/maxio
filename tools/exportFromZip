#!/usr/bin/env bash

# Needs:
# - ssh and scp (openssh)
# - convert (imagemagick)
# - pdftk (pdftk)
# - rsvg-convert (optional, to avoid rasterizing of lines)
# - gs & pdfinfo (optional, to account for original pdf size)


ASK_RENAME=""
COLOR_ANNOTATIONS=""
SSH_HOST="10.11.99.1"
SSH_TIMEOUT=1
path=""
STROKE_WIDTH="3"
OPACITY="1"
bad_args=""
arg_num=0
KEEP_TEMPDIR=""

while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
        -n|--askrename)
            ASK_RENAME=true
            shift
            ;;
        -c|--coloured_annotations)
            COLOR_ANNOTATIONS=true
            shift
            ;;
        -k|--keep_tempdir)
            KEEP_TEMPDIR=true
            shift
            ;;
        -r|--remoteip)
            SSH_HOST="$2"
            SSH_TIMEOUT=10
            shift
            shift
            ;;
        -w|--strokewidth)
            STROKE_WIDTH="$2"
            shift
            shift
            ;;
        -o|--opacity)
            OPACITY="$2"
            shift
            shift
            ;;
        -*)
            echo "Unknown option: $1"
            bad_args=TRUE
            shift
            ;;
        *)
            arg_num=$(( $arg_num + 1 ))
            case $arg_num in
                1)
                    path="$1"
                    shift
                    ;;
                *)
                    bad_args=TRUE
            esac
            ;;
    esac
done

if [[ $bad_args == TRUE || $arg_num < 1 ]]; then
    echo "Usage: $(basename "$0") [--askrename|-n] [--remoteip|-r STR] [--strokewidth|-w INT] [--opacity|-o FLOAT] [--coloured_annotations|-c] [--keep_tempdir|-k] <document-name-match|tar.gz-file>"
    exit 1
fi


function rmtgrep {
    RET_MATCH="$(${SSH_CMD} "$SSH_REMOTE" "/bin/egrep -$1 '$2' $3")"
    echo "/bin/egrep -$1 '$2' $3: $RET_MATCH"
}

declare -A DOCUMENTS_NAMES
declare -A DOCUMENTS_DATES

function find_document {
    OLD_IFS=$IFS
    IFS='/' _PATH=(${2#/}) # Sort path into array
    IFS=$OLD_IFS

    MATCH="${_PATH[$3]}"
    [ ${MATCH: -1} == "$" ] && MATCH="${MATCH:0:-1}" || MATCH="${MATCH}.*"
    [ ${MATCH:0:1} == "^" ] && MATCH="${MATCH:1}" || MATCH=".*${MATCH}"
    rmtgrep "ile" "\"visibleName\": \"${MATCH}\"" "/home/root/.local/share/remarkable/xochitl/*.metadata"
    echo $RET_MATCH
    matches_by_name="$RET_MATCH"

    for metadata_path in $matches_by_name; do

        metadata="$(${SSH_CMD} "$SSH_REMOTE" "cat $metadata_path")"

        if ! echo "$metadata" | grep -qF "\"parent\": \"$1\""; then
            continue
        fi

        if echo "$metadata" | grep -qF '"deleted": true'; then
            continue
        fi

        if [[ "$(expr $3 + 1)" -eq "${#_PATH[@]}" ]]; then
            if echo "$metadata" | grep -qF '"type": "DocumentType"'; then
                _UUID="$(basename "$metadata_path" .metadata)"
                NAME="$(echo "$metadata" | grep '"visibleName"' | sed 's/^.*: \+"\([^"]\+\)"/\1/g')"
                IDATE="$(echo "$metadata" | grep '"lastModified"' | egrep -o '[0-9]*')"
                STRDATE="$(date -d @$(expr ${IDATE} / 1000) '+%Y-%m-%d %H:%M:%S')"
                DOCUMENTS_NAMES["$_UUID"]="$NAME"
                DOCUMENTS_DATES["$_UUID"]="$STRDATE"
            fi
        else
            if echo "$metadata" | grep -qF '"type": "CollectionType"'; then
                find_document "$(basename "$metadata_path" .metadata)" "$2" "$(expr $3 + 1)"
            fi
        fi

    done
}

# Kills SSH session and exits with return 1
function exit_failed {
    ${SSH_CMD} -O exit "$SSH_REMOTE"
    exit 1
}


# Make sure we have rM2svg
command -v rM2svg >/dev/null 2>&1
if [[ $? -ne 0 ]]; then
    rM2svg_cmd="$(dirname `readlink -f $0`)/rM2svg"
    if [ ! -x "$rM2svg_cmd" ]; then
        echo "Cannot find rM2svg"
        exit 1
    fi
else
    rM2svg_cmd="rM2svg"
fi

[ -n "$COLOR_ANNOTATIONS" ] && rM2svg_cmd="$rM2svg_cmd -c"

tmpfolder=$(mktemp -d)
echo "Using temp folder '$tmpfolder'"

OUTPUT_UUID=""

if [ -f "$path" ]; then
    prev=${PWD}
    cp templates/*.png ${tmpfolder}/
    pushd "${tmpfolder}" 
    unzip "${prev}/${path}"
    [ ! $? -eq 0 ] && echo "File '$path' exists, but it is not a valid .tar.gz" && exit 1
    echo "GETTING BASENAME", ${path}
    filename=`basename "$path" .zip`
    echo "GOT BASENAME", ${path}
    popd
else
    echo "No such file '${path}'"
    exit 1
fi

# Fix for single page notebooks with no template (empty pagedata file by default)
if [ ! -s "${tmpfolder}"/*.pagedata ]; then
  echo "Blank" > "${tmpfolder}"/*.pagedata
fi

# Fix empty lines in pagedata files
sed -i -e "s/^[[:blank:]]*$/Blank/" "${tmpfolder}"/*.pagedata

NPAGES="$(wc -l "${tmpfolder}"/*.pagedata | cut -d\  -f1)"
echo "Exporting '${filename}' (${NPAGES} pages)"

if [ -f "${tmpfolder}"/*.pdf ]; then
    ln -s "${tmpfolder}/"*.pdf "${tmpfolder}/background_original.pdf"
    echo "Found underlying document PDF, using as background."

    if command -v "gs" > /dev/null && command -v "pdfinfo" > /dev/null
    then
        # Read PDF dimensions for scale correction
        size=$(pdfinfo ${tmpfolder}/background_original.pdf | grep "Page size" | awk '{print $3,$5}')
        width=$(echo ${size} | cut -f1 -d " ")
        height=$(echo ${size} | cut -f2 -d " ")

        # Calculate new width and necessary offset (rM dimensions: 1404x1872)
        new_width=$(echo "scale=5; ${height} / 1872 * 1404" | bc)
        offset=$(echo "scale=5; ${new_width} - ${width}" | bc)

        echo "Original PDF dimensions are (${width}x${height}), correcting by offset of ${offset} to fit rM foreground."

        # Add offset to background.pdf to match foreground dimensions
        gs -q -sDEVICE=pdfwrite -dBATCH -dNOPAUSE -sOutputFile=${tmpfolder}/background_with_offset.pdf \
        -dDEVICEWIDTHPOINTS=${new_width} -dDEVICEHEIGHTPOINTS=${height} -dFIXEDMEDIA \
        -c "{${offset} 0 translate}" \
        -f "${tmpfolder}/background_original.pdf"

        ln -s ${tmpfolder}/background_with_offset.pdf ${tmpfolder}/background.pdf
    else
        ln -s ${tmpfolder}/background_original.pdf ${tmpfolder}/background.pdf
    fi
else

    # Generate a PDF file out of the templates
    sed -e "s|^|\"${tmpfolder}\"/\"|" -e 's|$|.png"|' "${tmpfolder}"/*.pagedata | tr '\n' ' ' | sed -e "s|$|-transparent white \"${tmpfolder}\"/background.pdf|" | xargs convert
    [ ! $? -eq 0 ] && echo "Failed to generate a PDF file out of the templates" && exit 1
fi

# Extract annotations and create a PDF
IPAGE=0
jq '.pages' "${tmpfolder}"/*.content | jq '.[]' | while read -r page; do
    SPAGE="${page:1:${#page}-2}"
    let OPAGE=IPAGE
    let IPAGE=IPAGE+1
    if [ -f "${tmpfolder}"/*/"${OPAGE}.rm" ]; then
        echo "Processing page $IPAGE ($SPAGE)"
        echo $rM2svg_cmd --input "${tmpfolder}"/*/"${OPAGE}.rm" --output "${tmpfolder}/foreground$(printf %03d $IPAGE).svg"
        $rM2svg_cmd --input "${tmpfolder}"/*/"${OPAGE}.rm" --output "${tmpfolder}/foreground$(printf %03d $IPAGE).svg"
        [ ! $? -eq 0 ] && echo "Failed to generate '${tmpfolder}/foreground$(printf %03d $IPAGE).svg'" && exit 1
    else
        echo "Generating empty page $IPAGE ($IPAGE)"
cat << 'EOF' > "${tmpfolder}/foreground$(printf %03d $IPAGE).svg"
<svg xmlns="http://www.w3.org/2000/svg" height="1872" width="1404">
        <script type="application/ecmascript"> <![CDATA[
            var visiblePage = 'p1';
            function goToPage(page) {
                document.getElementById(visiblePage).setAttribute('style', 'display: none');
                document.getElementById(page).setAttribute('style', 'display: inline');
                visiblePage = page;
            }
        ]]> </script>
    <g id="p1" style="display:inline">
<rect x="0" y="0" width="1404" height="1872" fill-opacity="0"/></g></svg>
EOF
    fi
done

# Preprocess foreground*.svg
for f in "${tmpfolder}"/foreground*.svg; do
    # debug
    #cp -v "$f" ~/debug/"$(basename "$f")" 
    sed "s/stroke-width\:[\.0-9]\+/stroke-width:${STROKE_WIDTH}/g;s/opacity\:[\.0-9]\+/opacity:${OPACITY}/g" "$f" > "$f.clean"
    [ ! $? -eq 0 ] && echo "Failed to reset stroke-width and opacity in '$f'" && exit 1
done

# - optimize svg with svgo
if command -v "svgo" > /dev/null; then
    for f in "${tmpfolder}"/foreground*.svg; do
        svgo -i "$f"
        [ ! $? -eq 0 ] && echo "Failed to optimize svg '$f'" && continue
    done
fi

mkdir -p "${filename}" 2>/dev/null
cp "${tmpfolder}"/foreground*.svg "${filename}"
